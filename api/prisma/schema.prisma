// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider        = "prisma-client-js"

}

datasource db {
    provider = "postgres" // or your database provider
    url      = env("DATABASE_URL")
}


model Subscription {
  id            String  @id @default(uuid())
  subscriber    User    @relation("Subscriber",fields: [subscriberId], references: [id])
  channel       User    @relation("Channel",fields: [channelId], references: [id])
  subscriberId  String  //one who is subscribing
  channelId     String  //one to whom 'subscriber' is subscribing
  createdAt     DateTime @default(now())
}

model User {
  id           String        @id @unique @default(uuid())
  watchHistory WatchHistory[]
  videos        Video[]
  subscriptions Subscription[] @relation("Subscriber")
  subscribers   Subscription[] @relation("Channel")
  tweets        Tweet[]
  comments      Comment[]
  likes         Like[]
  playlist      Playlist[]
  viewer        Views[]
  username      String        @unique
  email         String        @unique
  fullName      String
  avatar        String
  coverImage    String
  password      String
  refreshToken  String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Video {
  id          String      @id @unique @default(uuid())
  comments    Comment[]
  likes       Like[]
  watchHistory WatchHistory[]
  playlists   PlaylistVideo[]
  videoFile   String
  thumbnail   String
  owner       User     @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  duration    Int
  views       Views[]
  isPublished Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Views {
  id Int @id @default(autoincrement())
  Video Video @relation(fields: [videoId], references: [id])
  videoId String 
  viewerId User @relation(fields: [userId], references: [id])
  userId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model WatchHistory{
  id  Int   @id @default(autoincrement())
  user  User @relation(fields: [userId], references: [id])
  userId String
  video   Video  @relation(fields: [videoId], references: [id])
  videoId String
  watchedAt DateTime  @default(now())
}

model Comment {
  id          String      @id @unique @default(uuid())
  content     String
  video       Video    @relation(fields: [videoId], references: [id])
  videoId     String
  owner       User     @relation(fields: [userId], references: [id])
  userId      String
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tweet {
  id          String      @id @unique @default(uuid())
  owner       User     @relation(fields: [userId], references: [id])
  userId      String
  likes       Like[]
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id          Int      @id @unique @default(autoincrement())
  likedBy     User     @relation(fields: [userId], references: [id])
  userId      String
  video       Video?   @relation(fields: [videoId], references: [id])
  videoId     String?
  comment     Comment? @relation(fields: [commentId], references: [id])
  commentId   String?
  tweet       Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Playlist{
  id  Int @id @default(autoincrement())
  name String
  description String
  videos   PlaylistVideo[]
  owner   User  @relation(fields: [userId], references: [id])
  userId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PlaylistVideo{
  id Int @id @default(autoincrement())
  playlist Playlist @relation(fields: [playlistId], references: [id])
  playlistId Int
  video Video @relation(fields: [videoId], references: [id])
  videoId String
}